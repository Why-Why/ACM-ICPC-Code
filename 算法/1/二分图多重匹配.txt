// 使用匈牙利算法(临接矩阵)求二分图多重匹配，复杂度 O(VE)。
// 输入：边集line，vN，uN，vDec(限制v最多连几个u)。
// 输出：linker(其中linker[v][0]表示连接v的u的个数)，匹配数目。
// 注意：先使用init初始化，然后使用addEdge加边。

const int MaxU=1010;
const int MaxV=510;

bool vis[MaxV];
int linker[MaxV][MaxU];
int uN,vN;
int line[MaxU][MaxV];
int vDec;

bool find(int u)
{
	for(int v=1;v<=vN;++v)
		if(line[u][v] && !vis[v])
		{
			vis[v]=1;

			if(linker[v][0]<vDec)
			{
				linker[v][++linker[v][0]]=u;

				return 1;
			}

			for(int i=1;i<=linker[v][0];++i)
				if(find(linker[v][i]))
				{
					linker[v][i]=u;

					return 1;
				}
		}

	return 0;
}

int Hungary()
{
	int ret=0;

	for(int u=1;u<=uN;++u)
	{
		memset(vis,0,sizeof(vis));

		if(find(u))
			++ret;
	}

	return ret;
}

void addEdge(int u,int v)
{
	line[u][v]=1;
}

void init(int _uN,int _vN)
{
	uN=_uN;
	vN=_vN;

	for(int i=1;i<=vN;++i)
	{
		linker[i][0]=0;

		for(int j=1;j<=uN;++j)
			line[j][i]=0;
	}
}
