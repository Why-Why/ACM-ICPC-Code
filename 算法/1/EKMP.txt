// 扩展KMP，复杂度 O(n+m)。
// 输入：s1及其长度n，s2及其长度m。
// 输出：extend(extend[i]表示s1[i...n-1]与s2[0...m-1]的最长公共前缀)，next(s2[i...m-1]与s2[0...m-1]的最长公共前缀)。
// 注意：字符串从0开始。
// 原理：KMP的next数组跳转的原理，记录最远位置p。

const int MaxN=110;
const int MaxM=110;

void EKMP_pre(int m,char s[],int next[])
{
	int p=0,a=1,L;

	next[0]=m;

	while(p+1<m && s[p]==s[p+1])
		++p;
	next[1]=p;

	for(int k=2;k<m;++k)
	{
		L=next[k-a];
		p=next[a]+a-(next[a]!=0);			/////

		if(k+L-1<p)
			next[k]=L;
		else
		{
			++p;
			while(p<m && s[p]==s[p-k])
				++p;

			next[k]=p-k;
			a=k;
		}
	}
}

void EKMP(int n,char s1[],int m,char s2[],int extend[],int next[])
{
	int p=0,a=0,L;

	EKMP_pre(m,s2,next);

	while(p<n && p<m && s1[p]==s2[p])
		++p;

	extend[0]=p;

	for(int k=1;k<n;++k)
	{
		L=next[k-a];
		p=a+extend[a]-(extend[a]!=0);			/////

		if(k+L-1<p)
			extend[k]=L;
		else
		{
			++p;
			while(p<n && p-k<m && s1[p]==s2[p-k])
				++p;

			extend[k]=p-k;
			a=k;
		}
	}
}
