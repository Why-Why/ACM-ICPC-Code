// ISAP求最大流(临接矩阵)，复杂度 O(V*V*E)。
// 输入：节点个数N，源点S，汇点T。
// 输出：最大流。
// 注意：先init，然后addEdge加边。
// 原理：寻找增广路，进行GAP优化和CUR优化。

const int MaxN=210;
const int INF=10e8;

int cap[MaxN][MaxN];
int pre[MaxN];
int S,T;
int dis[MaxN],gap[MaxN],cur[MaxN];

void update(int remm)
{
	int u=T;

	while(u!=S)
	{
		cap[pre[u]][u]-=remm;
		cap[u][pre[u]]+=remm;

		u=pre[u];
	}
}

int SAP(int N)
{
	int ret=0,u,remm=INF,mindis;

	u=pre[S]=S;
	gap[0]=N;

	while(dis[S]<N)
	{
		loop:
		for(int v=cur[u];v<=N;++v)
			if(cap[u][v] && dis[u]==dis[v]+1)
			{
				remm=min(remm,cap[u][v]);
				pre[v]=u;
				u=cur[u]=v;
				
				if(u==T)
				{
					ret+=remm;
					update(remm);
					u=S;
					remm=INF;
				}

				goto loop;
			}

		mindis=N-1;				/////
		for(int v=1;v<=N;++v)
			if(cap[u][v] && mindis>dis[v])
			{
				cur[u]=v;
				mindis=dis[v];
			}
		if(--gap[dis[u]]==0)
			break;
		dis[u]=mindis+1;
		++gap[dis[u]];
		u=pre[u];
	}

	return ret;
}

void init(int N,int _S,int _T)
{
	for(int i=1;i<=N;++i)
	{
		gap[i]=dis[i]=0;
		cur[i]=1;

		for(int j=1;j<=N;++j)
			cap[i][j]=0;
	}

	S=_S;
	T=_T;
}

void addEdge(int u,int v,int c)
{
	cap[u][v]+=c;
}

////////////////////////////////////////////////////////////////

// ISAP求最大流(前向星)，复杂度 O(V*V*E)。
// 输入：N，S，T，边集E。
// 输出：最大流。
// 注意：先init，然后addEdge。

const int MaxN=210;
const int MaxM=1510;
const int INF=10e8;

struct Edge
{
	int to,next,cap,flow;
};

Edge E[MaxM];
int Ecou;
int head[MaxN];
int gap[MaxN],dis[MaxN],pre[MaxN],cur[MaxN];
int S,T;

void init(int N,int _S,int _T)
{
	S=_S;
	T=_T;
	Ecou=0;

	for(int i=1;i<=N;++i)
	{
		head[i]=-1;
		gap[i]=dis[i]=0;
	}
}

void addEdge(int u,int v,int c,int rc=0)		// 单向边三个参数，双向边四个。
{
	E[Ecou].to=v;
	E[Ecou].cap=c;
	E[Ecou].flow=0;
	E[Ecou].next=head[u];
	head[u]=Ecou++;

	E[Ecou].to=u;
	E[Ecou].cap=rc;
	E[Ecou].flow=0;
	E[Ecou].next=head[v];
	head[v]=Ecou++;
}

void update(int remm)
{
	int u=T;

	while(u!=S)
	{
		E[pre[u]].flow+=remm;
		E[pre[u]^1].flow-=remm;

		u=E[pre[u]^1].to;
	}
}

int SAP(int N)
{
	for(int i=1;i<=N;++i)
		cur[i]=head[i];				/////

	int u,v,ret=0,remm=INF,mindis;
	
	u=S;
	pre[S]=-1;
	gap[0]=N;

	while(dis[S]<N)
	{
		loop:
		for(int i=cur[u];i!=-1;i=E[i].next)
		{
			v=E[i].to;

			if(E[i].cap-E[i].flow && dis[u]==dis[v]+1)	//!!!
			{
				pre[v]=i;
				cur[u]=i;
				u=v;

				if(u==T)
				{
					for(int i=pre[u];i!=-1;i=pre[E[i^1].to])
						remm=min(remm,E[i].cap-E[i].flow);
					ret+=remm;
					update(remm);
					u=S;				// ???
					remm=INF;
				}

				goto loop;
			}
		}

		mindis=N-1;

		for(int i=head[u];i!=-1;i=E[i].next)
			if(E[i].cap-E[i].flow && mindis>dis[E[i].to])
			{
				cur[u]=i;
				mindis=dis[E[i].to];
			}
		
		if(--gap[dis[u]]==0)
			break;

		dis[u]=mindis+1;
		++gap[dis[u]];

		if(u!=S)
			u=E[pre[u]^1].to;
	}

	return ret;
}
