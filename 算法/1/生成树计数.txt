使用Matrix-Tree 定理(Kirchhoff 矩阵-树定理)。
1、G 的度数矩阵 D[G]是一个 n*n 的矩阵,并且满足:当 i≠j 时,dij=0;当 i=j 时,dij 等于 vi 的度数。
2、G 的邻接矩阵 A[G]也是一个 n*n 的矩阵, 并且满足:如果 vi、vj 之间有边直接相连,则 aij=1,否则为 0。
我们定义 G 的 Kirchhoff 矩阵(也称为拉普拉斯算子)C[G]为 C[G]=D[G]-A[G],则 Matrix-Tree 定理可以描述为: G 的所有不同的生成树的个数等于其 Kirchhoff 矩阵 C[G]任何一个 n-1 阶主子式的行列式的绝对值。
所谓 n-1 阶主子式,就是对于 r(1≤r≤n),将 C[G]的第 r 行、第 r 列同时去掉后得到的新矩阵,用 Cr[G]表示。

// 使用Matrix-Tree定理，复杂度 O(n^3)。
// 输入：cost(0为不连通，1为连通。)，n。
// 输出：种类数(long double)。
// 注意：使用的long double，因此不能取模，计算行列式还可以使用分数类，注意表示范围。

const int MaxN=110;
const long double eps=10e-8;
const int INF=10e8;

long double Matrix[MaxN][MaxN];

inline bool zero(long double x)
{
	return ((x<0 ? -x :x)<eps);
}

long double getDet(long double mat[][MaxN],int n)
{
	int sign=0;
	long double ret=1;

	for(int i=1;i<=n;++i)
	{
		if(zero(mat[i][i]))
		{
			int j;
			for(j=i+1;j<=n;++j)
				if(!zero(mat[j][i]))
					break;

			if(j>n)
				return 0;

			for(int k=1;k<=n;++k)
				swap(mat[i][k],mat[j][k]);
			++sign;
		}

		ret*=mat[i][i];

		for(int j=i+1;j<=n;++j)
			mat[i][j]/=mat[i][i];

		for(int j=i+1;j<=n;++j)
			for(int k=i+1;k<=n;++k)
				mat[j][k]-=mat[j][i]*mat[i][k];
	}

	if(sign & 1)
		return -ret;
	return ret;
}

long double getCouST(int cost[][MaxN],int n)
{
	int cou;

	for(int i=1;i<=n;++i)
	{
		cou=0;

		for(int j=1;j<=n;++j)
			if(i!=j)
			{
				Matrix[i][j]=(cost[i][j] ? -1 : 0);
				cou-=Matrix[i][j];
			}
		Matrix[i][i]=cou;
	}

	return getDet(Matrix,n-1);
}
