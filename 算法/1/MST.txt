// Prim算法求MST，复杂度 O(n^2)。
// 输入 cost[][]，n。
// 输出 最小生成树的权值（-1为不连通，所以注意负权图。）。
// 注意：cost的初始化，没有连通的边为INF。

const int INF=10e8;
const int MaxN=110;

bool vis[MaxN];
int lowc[MaxN];

int Prim(int cost[][MaxN],int n)
{
	int ans=0;
	int minn,k;

	memset(vis,0,sizeof(vis));
	vis[1]=1;

	for(int i=1;i<=n;++i)
		lowc[i]=cost[1][i];

	for(int i=1;i<=n-1;++i)				// 循环n-1次。
	{
		minn=INF;
		k=-1;

		for(int j=1;j<=n;++j)
			if(!vis[j] && minn>lowc[j])
			{
				minn=lowc[j];
				k=j;
			}

		if(minn==INF)
			return -1;

		ans+=minn;
		vis[k]=1;

		for(int j=1;j<=n;++j)
			if(!vis[j] && lowc[j]>cost[k][j])
				lowc[j]=cost[k][j];
	}

	return ans;
}

///////////////////////////////////////////////////////////////////////////////////

// Kruskal算法求MST，复杂度 O(E logE) (E为边数。)。
// 输入：边集E，n。
// 输出：最小权值(-1为不连通，注意负权图)。
// 注意：E的初始化(设置couEdge=0)，使用addEdge加边。

const int INF=10e8;
const int MaxN=110;
const int MaxM=MaxN*MaxN;

struct Edge
{
	int u,v,cost;

	bool operator < (const Edge &a) const
	{
		return cost<a.cost;
	}
};

Edge E[MaxM];			// !!!
int couEdge;
int fa[MaxN];

int find(int x)
{
	if(fa[x]==-1)			// !!!
		return x;

	fa[x]=find(fa[x]);

	return fa[x];
}

int Kruskal(int n)
{
	int ans=0;
	int cou=0;
	int u,v,cost,t1,t2;

	memset(fa,-1,sizeof(fa));
	sort(E,E+couEdge);

	for(int i=0;i<couEdge;++i)
	{
		u=E[i].u;
		v=E[i].v;
		cost=E[i].cost;

		t1=find(u);
		t2=find(v);

		if(t1!=t2)
		{
			ans+=cost;
			fa[t1]=t2;
			++cou;
		}

		if(cou==n-1)
			break;
	}

	if(cou<n-1)
		return -1;

	return ans;
}

void addEdge(int u,int v,int c)
{
	E[couEdge].u=u;
	E[couEdge].v=v;
	E[couEdge++].cost=c;
}
