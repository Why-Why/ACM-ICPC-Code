// 树链剖分进行点权维护，复杂度 O(klogN)。
// 输入：一颗树，N。
// 输出：fa[i](i的父亲)，son[i](i的重儿子，没有为-1)，dep[i](i的深度，dep[1]=1)，siz[i](i及其所有子节点的个数)，top[i](i所在重链最顶端的点)，w[i](i节点在线段树等中的位置，w[1]=1)，fw[i](线段树等中位置i在树中的节点)。
// 注意：从1开始，无向边添加两次，先init，然后addEdge，然后dfs1(1,-1,1)，dfs2(1)，建线段树等。
// 其他：树上更新方法，f1=top[u]，f2=top[v]，若f1!=f2，更新dep大的那个重链，然后一直循环直到f1=f2。
// 原理：通过两次dfs获得树中各边在数据结构中的位置。

const int MaxN=50010;

struct Edge
{
	int to,next;
};

Edge E[MaxN*2];
int Ecou,head[MaxN];

int fa[MaxN],dep[MaxN],son[MaxN],siz[MaxN],top[MaxN],w[MaxN],fw[MaxN];
int Tcou;

void init()
{
	Ecou=0;
	Tcou=1;
	w[1]=1;				//!!!
	fw[1]=1;			//!!!
	top[1]=1;			//!!!
	memset(head,-1,sizeof(head));
}

void addEdge(int u,int v)
{
	E[Ecou].to=v;
	E[Ecou].next=head[u];
	head[u]=Ecou++;
}

void dfs1(int u,int pre,int d)
{
	int v;

	dep[u]=d;
	fa[u]=pre;
	siz[u]=1;
	son[u]=-1;

	for(int i=head[u];i!=-1;i=E[i].next)
		if(E[i].to!=pre)
		{
			v=E[i].to;
			dfs1(v,u,d+1);
			siz[u]+=siz[v];

			if(son[u]==-1 || siz[son[u]]<siz[v])
				son[u]=v;
		}
}

void dfs2(int u)
{
	if(son[u]==-1)
		return;

	top[son[u]]=top[u];
	w[son[u]]=++Tcou;
	fw[w[son[u]]]=son[u];

	dfs2(son[u]);

	int v;

	for(int i=head[u];i!=-1;i=E[i].next)
		if(E[i].to!=son[u] && E[i].to!=fa[u])
		{
			v=E[i].to;
			top[v]=v;
			w[v]=++Tcou;
			
			dfs2(v);
		}
}

/////// 树状数组部分。

inline int lowbit(int x)
{
	return x&(-x);
}

int C[MaxN];
int N;

int sum(int x)
{
	int ret=0;

	while(x>0)
	{
		ret+=C[x];
		x-=lowbit(x);
	}

	return ret;
}

void add(int x,int d)
{
	while(x<=N)
	{
		C[x]+=d;
		x+=lowbit(x);
	}
}

void update(int u,int v,int d)
{
	int f1=top[u],f2=top[v];

	while(f1!=f2)
	{
		if(dep[f1]<dep[f2])
		{
			swap(f1,f2);
			swap(u,v);
		}

		add(w[f1],d);
		add(w[u]+1,-d);
		u=fa[f1];
		f1=top[u];	//!!!
	}

	if(dep[u]>dep[v])
		swap(u,v);

	add(w[u],d);
	add(w[v]+1,-d);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 树链剖分进行边权维护，复杂度 O(klogN)。
// 输入：一颗树，N。
// 输出：fa[i](i的父亲)，son[i](i的重儿子，没有为-1)，dep[i](i的深度，dep[1]=1)，siz[i](i及其所有子节点的个数)，top[i](i所在重链最顶端的点)，w[i](i节点与其父亲的连边在线段树等中的位置，w[1]=1)，fw[i](线段树等中位置i在树中的节点)。
// 注意：从1开始，无向边添加两次，先init，然后addEdge，然后dfs1(1,-1,1)，dfs2(1)，建线段树等，稍微不同于维护点权。
// 其他：树上更新方法，f1=top[u]，f2=top[v]，若f1!=f2，更新dep大的那个重链，然后一直循环直到f1=f2。
// 原理：通过两次dfs获得树中各边在数据结构中的位置。

const int MaxN=10010;

struct Edge
{
	int to,next,cost;
};

Edge E[MaxN*2];
int head[MaxN],Ecou;

int fa[MaxN],dep[MaxN],son[MaxN],siz[MaxN],top[MaxN],w[MaxN],fw[MaxN];
int Tcou;

void init()
{
	Ecou=Tcou=0;			// 不同于点权。
	w[1]=0;
	top[1]=1;
	memset(head,-1,sizeof(head));
}

void addEdge(int u,int v,int c)
{
	E[Ecou].to=v;
	E[Ecou].cost=c;
	E[Ecou].next=head[u];
	head[u]=Ecou++;
}

void dfs1(int u,int pre,int d)
{
	int v;

	dep[u]=d;
	fa[u]=pre;
	siz[u]=1;
	son[u]=-1;

	for(int i=head[u];i!=-1;i=E[i].next)
		if(E[i].to!=pre)
		{
			v=E[i].to;
			dfs1(v,u,d+1);
			siz[u]+=siz[v];

			if(son[u]==-1 || siz[son[u]]<siz[v])
				son[u]=v;
		}
}

void dfs2(int u)
{
	if(son[u]==-1)
		return;

	top[son[u]]=top[u];
	w[son[u]]=++Tcou;
	fw[w[son[u]]]=son[u];

	dfs2(son[u]);

	int v;

	for(int i=head[u];i!=-1;i=E[i].next)
		if(E[i].to!=son[u] && E[i].to!=fa[u])
		{
			v=E[i].to;
			top[v]=v;
			w[v]=++Tcou;

			dfs2(v);
		}
}

///// 线段树部分。
#define lc po*2
#define rc po*2+1
#define lson L,M,lc
#define rson M+1,R,rc

int BIT[MaxN*4];
int N;

void pushUP(int po)
{
	BIT[po]=max(BIT[lc],BIT[rc]);
}

int query_BIT(int ql,int qr,int L,int R,int po)
{
	if(ql<=L && qr>=R)
		return BIT[po];

	int M=(L+R)/2;

	if(ql>M)
		return query_BIT(ql,qr,rson);
	if(qr<=M)
		return query_BIT(ql,qr,lson);

	return max(query_BIT(ql,qr,lson),query_BIT(ql,qr,rson));
}

void update_BIT(int uc,int a,int L,int R,int po)
{
	if(L==R)
	{
		BIT[po]=a;
		return;
	}

	int M=(L+R)/2;

	if(uc<=M)
		update_BIT(uc,a,lson);
	else
		update_BIT(uc,a,rson);

	pushUP(po);
}

void update(int a,int b)
{
	if(fa[E[2*a-2].to]==E[2*a-1].to)
		update_BIT(w[E[2*a-2].to],b,1,N-1,1);
	else
		update_BIT(w[E[2*a-1].to],b,1,N-1,1);
}

int query(int u,int v)
{
	int f1=top[u],f2=top[v];
	int ret=0;

	while(f1!=f2)
	{
		if(dep[f1]<dep[f2])
		{
			swap(f1,f2);
			swap(u,v);
		}

		ret=max(ret,query_BIT(w[f1],w[u],1,N-1,1));		// N-1。

		u=fa[f1];
		f1=top[u];
	}

	if(u==v)						//!!!
		return ret;

	if(dep[u]>dep[v])
		swap(u,v);

	ret=max(ret,query_BIT(w[son[u]],w[v],1,N-1,1));

	return ret;
}

void build_BIT(int N)
{
	int v;

	for(int u=1;u<=N;++u)
		for(int i=head[u];i!=-1;i=E[i].next)
		{
			v=E[i].to;

			if(fa[v]==u)
				update_BIT(w[v],E[i].cost,1,N-1,1);
		}
}
