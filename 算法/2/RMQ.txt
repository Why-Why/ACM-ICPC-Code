// 数组从1开始，求最大值。

const int MaxN=50010;

int dp[MaxN][20];
int logN[MaxN];			// logN[i]表示log(i)的值。

void init_RMQ(int n,int num[])
{
	logN[0]=-1;

	for(int i=1;i<=n;++i)
	{
		dp[i][0]=num[i];
		logN[i]=((i&(i-1))==0) ? logN[i-1]+1 : logN[i-1];	// !!!
	}

	for(int j=1;j<=logN[n];++j)
		for(int i=1;i+(1<<j)-1<=n;++i)
			dp[i][j]=max(dp[i][j-1],dp[i+(1<<(j-1))][j-1]);
}

int RMQ(int x,int y)
{
	int k=logN[y-x+1];

	return max(dp[x][k],dp[y-(1<<k)+1][k]);
}

/////////////////////////////////////////////////////////////////////////////

const int MaxN=301;

int dp[MaxN][MaxN][9][9];
int logN[MaxN];

void init_RMQ(int num[][MaxN],int n,int m)
{
	logN[0]=-1;

	for(int i=1;i<MaxN;++i)
		logN[i]=((i&(i-1))==0) ? logN[i-1]+1 : logN[i-1];

	for(int i=1;i<=n;++i)
		for(int j=1;j<=m;++j)
			dp[i][j][0][0]=num[i][j];

	for(int ii=0;ii<=logN[n];++ii)
		for(int jj=0;jj<=logN[m];++jj)
			if(ii+jj)
				for(int i=1;i+(1<<ii)-1<=n;++i)
					for(int j=1;j+(1<<jj)-1<=m;++j)
						if(ii)
							dp[i][j][ii][jj]=max(dp[i][j][ii-1][jj],dp[i+(1<<(ii-1))][j][ii-1][jj]);
						else
							dp[i][j][ii][jj]=max(dp[i][j][ii][jj-1],dp[i][j+(1<<jj-1)][ii][jj-1]);
}

// x1<=x2 , y1<=y2;
int RMQ(int x1,int y1,int x2,int y2)
{
	int k1=logN[x2-x1+1],k2=logN[y2-y1+1];

	x2=x2-(1<<k1)+1;
	y2=y2-(1<<k2)+1;

	return max(max(dp[x1][y1][k1][k2],dp[x1][y2][k1][k2]),max(dp[x2][y1][k1][k2],dp[x2][y2][k1][k2]));
}
