// LCA转RMQ在线算法，复杂度 O(N)，查询 O(NlogN)。
// 输入：边集，root。
// 输出：最近公共祖先。
// 注意：先Edge_init，然后addEdge，然后LCA_init，然后query就可。
// 原理：dfs把LCA转化为RMQ问题求解。

const int MaxN=40005;

int logN[2*MaxN];
int dp[2*MaxN][20];
int rmq[2*MaxN];			// 某序号的深度。

void RMQ_init(int N)
{
	logN[0]=-1;

	for(int i=1;i<=N;++i)
	{
		logN[i]=((i&(i-1))==0) ? logN[i-1]+1 : logN[i-1];
		dp[i][0]=i;
	}

	for(int j=1;j<=logN[N];++j)
		for(int i=1;i+(1<<j)-1<=N;++i)
			dp[i][j]=rmq[dp[i][j-1]]<rmq[dp[i+(1<<(j-1))][j-1]] ? dp[i][j-1] : dp[i+(1<<(j-1))][j-1];
}

int RMQ(int a,int b)
{
	if(a>b)
		swap(a,b);

	int k=logN[b-a+1];

	return rmq[dp[a][k]]<=rmq[dp[b-(1<<k)+1][k]] ? dp[a][k] : dp[b-(1<<k)+1][k];
}

struct Edge
{
	int to,next;
};

Edge E[MaxN*2];
int Ecou,head[MaxN];

int F[MaxN*2];			// dfs遍历的顺序标号。
int P[MaxN];			// P[i]表示i在F中第一次出现的位置。
int cou;

void Edge_init()
{
	Ecou=0;
	memset(head,-1,sizeof(head));
}

void addEdge(int u,int v)
{
	E[Ecou].to=v;
	E[Ecou].next=head[u];
	head[u]=Ecou++;
}

void dfs(int u,int pre,int dep)
{
	int v;

	F[++cou]=u;
	rmq[cou]=dep;
	P[u]=cou;

	for(int i=head[u];i!=-1;i=E[i].next)
	{
		v=E[i].to;

		if(v==pre)
			continue;

		dfs(v,u,dep+1);
		
		F[++cou]=u;
		rmq[cou]=dep;
	}
}

void LCA_init(int root,int N)
{
	cou=0;
	dfs(root,root,0,0);
	RMQ_init(2*N-1);
}

int query(int u,int v)
{
	return F[RMQ(P[u],P[v])];
}

////////////////////////////////////////////////////////////////////////////////

// 倍增法求LCA，在线算法，复杂度 O(NlogN)，查询 O(logN)。
// 输入：边集，root。
// 输出：LCA，par[i][j](i结点的第2^j个父亲(超出为root))。
// 注意：先Edge_init，然后addEdge，然后BFS，然后query。
// 原理：倍增使用par数组。

const int MaxN=50000;
const int LOG=20;

struct Edge
{
	int next,to;
};

Edge E[MaxN*2];
int head[MaxN],Ecou;

int dep[MaxN];
int par[MaxN][LOG];

void Edge_init()
{
	memset(head,-1,sizeof(head));
	Ecou=0;
}

void addEdge(int u,int v)
{
	E[Ecou].next=head[u];
	E[Ecou].to=v;
	head[u]=Ecou++;
}

int que[MaxN];
int first,last;

void BFS(int root)
{
	int t,v;

	first=last=0;
	dep[root]=1;
	par[root][0]=root;
	que[last++]=root;

	while(last-first)
	{
		t=que[first++];

		for(int i=1;i<LOG;++i)
			par[t][i]=par[par[t][i-1]][i-1];

		for(int i=head[t];i!=-1;i=E[i].next)
		{
			v=E[i].to;

			if(v==par[t][0])
				continue;

			dep[v]=dep[t]+1;
			par[v][0]=t;
			que[last++]=v;
		}
	}
}

int query(int u,int v)
{
	int len;

	if(dep[u]<dep[v])
		swap(u,v);

	for(len=0;(1<<len)<=dep[u];++len);			// !
	--len;

	for(int i=len;i>=0;--i)
		if(dep[u]-(1<<i)>=dep[v])
			u=par[u][i];

	if(u==v)
		return u;

	for(int i=len;i>=0;--i)
		if(par[u][i]!=par[v][i])
		{
			u=par[u][i];
			v=par[v][i];
		}

	return par[u][0];
}
