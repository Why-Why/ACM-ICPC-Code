// KD树求最近点，复杂度建树O(NlogN)，询问O(logN)。
// 输入：Dim维度，P用于保存节点。
// 输出：最近距离。
// 注意：如果要计算每个点覆盖的范围时，最好是从底向上，这样每个点的范围是小的。

const int MaxN=100005;
const int MaxDim=2;

struct Point {
	int x[MaxDim];
};

Point P[MaxN];			// 顺序在build时会改变。
int Dim=2;					// 维度，from 0。
int cur;

inline bool cmp(const Point &a,const Point &b) {
	return a.x[cur]<b.x[cur];
}

void build(int L,int R,int dep) {
	if(L>=R) return;

	cur=dep%Dim;
	int M=(L+R)>>1;

	nth_element(P+L,P+M,P+R+1,cmp);
	build(L,M-1,dep+1);
	build(M+1,R,dep+1);
}

const long long INF=3000000000000000000LL;

inline long long k_dist(const Point &a,const Point &b,int cur) {			// 可定制!!!
	return (a.x[cur]-b.x[cur])*(long long)(a.x[cur]-b.x[cur]);
}

inline long long dist(const Point &a,const Point &b) {						// 可定制!!!
	long long ret=0;
	for(int i=0;i<Dim;++i) ret+=k_dist(a,b,i);
	return ret;
}

long long query(const Point &q,int L,int R,int dep) {						// 最近邻。
	if(L>=R) {
		if(L==R) return dist(q,P[L]);
		return INF;
	}

	int tcur=dep%Dim;						// 不能用共有变量cur!!!
	int M=(L+R)>>1;
	long long ret=dist(q,P[M]),tmp;			// can be changed.

	if(q.x[tcur]<P[M].x[tcur]) {
		tmp=query(q,L,M-1,dep+1);

		if(tmp>k_dist(q,P[M],tcur))		// or >=
			tmp=min(tmp,query(q,M+1,R,dep+1));
	}
	else {
		tmp=query(q,M+1,R,dep+1);

		if(tmp>k_dist(q,P[M],tcur))
			tmp=min(tmp,query(q,L,M-1,dep+1));
	}

	return min(tmp,ret);
}
